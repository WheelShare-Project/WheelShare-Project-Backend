// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Metadata;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Mock;

#nullable disable

namespace Mock.Migrations
{
    [DbContext(typeof(WheelShareContext))]
    [Migration("20250128212832_AddSeedData")]
    partial class AddSeedData
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder
                .HasAnnotation("ProductVersion", "7.0.0")
                .HasAnnotation("Relational:MaxIdentifierLength", 128);

            SqlServerModelBuilderExtensions.UseIdentityColumns(modelBuilder);

            modelBuilder.Entity("Repository.Entities.Payment", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<double>("Amount")
                        .HasColumnType("float");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.Property<bool>("Status")
                        .HasColumnType("bit");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.HasIndex("UserId");

                    b.ToTable("Payments");
                });

            modelBuilder.Entity("Repository.Entities.Ride", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<int>("DestinationStationID")
                        .HasColumnType("int");

                    b.Property<int>("DriveId")
                        .HasColumnType("int");

                    b.Property<DateTime>("EndTime")
                        .HasColumnType("datetime2");

                    b.Property<bool>("IsPrivateRide")
                        .HasColumnType("bit");

                    b.Property<int>("SourceStationID")
                        .HasColumnType("int");

                    b.Property<DateTime>("StartTime")
                        .HasColumnType("datetime2");

                    b.Property<string>("Status")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<double>("TotalCost")
                        .HasColumnType("float");

                    b.Property<int>("VehicleId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("DestinationStationID");

                    b.HasIndex("DriveId");

                    b.HasIndex("SourceStationID");

                    b.HasIndex("VehicleId");

                    b.ToTable("Rides");
                });

            modelBuilder.Entity("Repository.Entities.RideParticipant", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("DropOffLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PickupLocation")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("RideId")
                        .HasColumnType("int");

                    b.Property<double>("ShareCost")
                        .HasColumnType("float");

                    b.Property<int>("UserId")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("RideId");

                    b.HasIndex("UserId");

                    b.ToTable("RideParticipants");
                });

            modelBuilder.Entity("Repository.Entities.Station", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Address")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Area")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("AvailableSpaces")
                        .HasColumnType("int");

                    b.Property<int>("Capacity")
                        .HasColumnType("int");

                    b.Property<string>("City")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Stations");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            Address = "Shmaaya 6",
                            Area = "Center",
                            AvailableSpaces = 2,
                            Capacity = 3,
                            City = "Elad"
                        },
                        new
                        {
                            Id = 2,
                            Address = "Hertzel St 15",
                            Area = "South",
                            AvailableSpaces = 1,
                            Capacity = 2,
                            City = "Netivot"
                        },
                        new
                        {
                            Id = 3,
                            Address = "Rabi Akiva 48",
                            Area = "Center",
                            AvailableSpaces = 0,
                            Capacity = 3,
                            City = "Bnei-Brak"
                        });
                });

            modelBuilder.Entity("Repository.Entities.User", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("Email")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("FirstName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("Gender")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("IdNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LastName")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("PhoneNumber")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.HasKey("Id");

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Repository.Entities.Vehicle", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("int");

                    SqlServerPropertyBuilderExtensions.UseIdentityColumn(b.Property<int>("Id"));

                    b.Property<string>("AvailabilityStatus")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<string>("LicensePlate")
                        .IsRequired()
                        .HasColumnType("nvarchar(max)");

                    b.Property<int>("Seats")
                        .HasColumnType("int");

                    b.Property<int>("StationID")
                        .HasColumnType("int");

                    b.HasKey("Id");

                    b.HasIndex("StationID");

                    b.ToTable("Vehicles");

                    b.HasData(
                        new
                        {
                            Id = 1,
                            AvailabilityStatus = "Available",
                            LicensePlate = "12457963",
                            Seats = 5,
                            StationID = 1
                        },
                        new
                        {
                            Id = 2,
                            AvailabilityStatus = "Unavailable",
                            LicensePlate = "32654526",
                            Seats = 5,
                            StationID = 1
                        },
                        new
                        {
                            Id = 3,
                            AvailabilityStatus = "Available",
                            LicensePlate = "98563652",
                            Seats = 7,
                            StationID = 1
                        },
                        new
                        {
                            Id = 4,
                            AvailabilityStatus = "Available",
                            LicensePlate = "48752165",
                            Seats = 5,
                            StationID = 2
                        },
                        new
                        {
                            Id = 5,
                            AvailabilityStatus = "Unavailable",
                            LicensePlate = "98546532",
                            Seats = 7,
                            StationID = 2
                        },
                        new
                        {
                            Id = 6,
                            AvailabilityStatus = "Unavailable",
                            LicensePlate = "32654896",
                            Seats = 7,
                            StationID = 3
                        },
                        new
                        {
                            Id = 7,
                            AvailabilityStatus = "Unavailable",
                            LicensePlate = "12659745",
                            Seats = 7,
                            StationID = 3
                        },
                        new
                        {
                            Id = 8,
                            AvailabilityStatus = "Unavailable",
                            LicensePlate = "92365498",
                            Seats = 5,
                            StationID = 3
                        });
                });

            modelBuilder.Entity("Repository.Entities.Payment", b =>
                {
                    b.HasOne("Repository.Entities.Ride", "Ride")
                        .WithMany()
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.User", "User")
                        .WithMany("Payments")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.Ride", b =>
                {
                    b.HasOne("Repository.Entities.Station", "DestinationStation")
                        .WithMany()
                        .HasForeignKey("DestinationStationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.User", "Driver")
                        .WithMany("Rides")
                        .HasForeignKey("DriveId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Station", "SourceStation")
                        .WithMany()
                        .HasForeignKey("SourceStationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.Vehicle", "Vehicle")
                        .WithMany()
                        .HasForeignKey("VehicleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("DestinationStation");

                    b.Navigation("Driver");

                    b.Navigation("SourceStation");

                    b.Navigation("Vehicle");
                });

            modelBuilder.Entity("Repository.Entities.RideParticipant", b =>
                {
                    b.HasOne("Repository.Entities.Ride", "Ride")
                        .WithMany()
                        .HasForeignKey("RideId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Repository.Entities.User", "User")
                        .WithMany()
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Ride");

                    b.Navigation("User");
                });

            modelBuilder.Entity("Repository.Entities.Vehicle", b =>
                {
                    b.HasOne("Repository.Entities.Station", "Station")
                        .WithMany("Vehicles")
                        .HasForeignKey("StationID")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Station");
                });

            modelBuilder.Entity("Repository.Entities.Station", b =>
                {
                    b.Navigation("Vehicles");
                });

            modelBuilder.Entity("Repository.Entities.User", b =>
                {
                    b.Navigation("Payments");

                    b.Navigation("Rides");
                });
#pragma warning restore 612, 618
        }
    }
}
